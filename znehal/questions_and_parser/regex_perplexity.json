[
    {
        "QN": "1",
        "type": "mcq",
        "question": "What is the purpose of the 're' module in Python?",
        "options": {
            "A": "For handling exceptions",
            "B": "For working with regular expressions",
            "C": "For database operations",
            "D": "For network programming"
        },
        "answer": "B",
        "explanation": "The 're' module in Python provides support for regular expressions, which are used for pattern matching in strings."
    },
    {
        "QN": "2",
        "type": "mcq",
        "question": "What does the '^' symbol represent in a regular expression?",
        "options": {
            "A": "End of a string",
            "B": "Start of a string",
            "C": "Any character",
            "D": "Digit"
        },
        "answer": "B",
        "explanation": "The '^' symbol in a regular expression represents the start of a string."
    },
    {
        "QN": "3",
        "type": "mcq",
        "question": "Which function is used to search for the first occurrence of a pattern in a string?",
        "options": {
            "A": "re.match()",
            "B": "re.search()",
            "C": "re.findall()",
            "D": "re.sub()"
        },
        "answer": "B",
        "explanation": "The 're.search()' function is used to search for the first occurrence of a pattern in a string."
    },
    {
        "QN": "4",
        "type": "mcq",
        "question": "What does the '\\d' character class represent in a regular expression?",
        "options": {
            "A": "Any whitespace character",
            "B": "Any digit",
            "C": "Any letter",
            "D": "Any special character"
        },
        "answer": "B",
        "explanation": "The '\\d' character class in a regular expression represents any digit (equivalent to [0-9])."
    },
    {
        "QN": "5",
        "type": "mcq",
        "question": "What is the purpose of the 're.IGNORECASE' flag?",
        "options": {
            "A": "To make the pattern case-sensitive",
            "B": "To make the pattern case-insensitive",
            "C": "To ignore whitespace",
            "D": "To ignore special characters"
        },
        "answer": "B",
        "explanation": "The 're.IGNORECASE' flag makes the pattern case-insensitive, so it matches both lowercase and uppercase characters."
    },
    {
        "QN": "6",
        "type": "mcq",
        "question": "What does the 're.findall()' function return?",
        "options": {
            "A": "A single match object",
            "B": "A list of all matches",
            "C": "A boolean indicating if a match was found",
            "D": "The original string"
        },
        "answer": "B",
        "explanation": "The 're.findall()' function returns a list of all matches in the string."
    },
    {
        "QN": "7",
        "type": "mcq",
        "question": "What is the purpose of the 're.sub()' function?",
        "options": {
            "A": "To search for a pattern",
            "B": "To replace occurrences of a pattern",
            "C": "To split a string",
            "D": "To join strings"
        },
        "answer": "B",
        "explanation": "The 're.sub()' function is used to replace occurrences of a pattern in a string."
    },
    {
        "QN": "8",
        "type": "mcq",
        "question": "What does the 're.compile()' function do?",
        "options": {
            "A": "It compiles a regular expression pattern into a regular expression object",
            "B": "It searches for a pattern in a string",
            "C": "It replaces occurrences of a pattern",
            "D": "It splits a string"
        },
        "answer": "A",
        "explanation": "The 're.compile()' function compiles a regular expression pattern into a regular expression object, which can be used for matching using its 'match()', 'search()', and other methods."
    },
    {
        "QN": "9",
        "type": "mcq",
        "question": "What does the 're.split()' function do?",
        "options": {
            "A": "It joins strings using a pattern",
            "B": "It splits a string using a pattern",
            "C": "It searches for a pattern in a string",
            "D": "It replaces occurrences of a pattern"
        },
        "answer": "B",
        "explanation": "The 're.split()' function splits a string into substrings using a regular expression pattern as the separator."
    },
    {
        "QN": "10",
        "type": "mcq",
        "question": "What is the purpose of the 're.escape()' function?",
        "options": {
            "A": "To unescape special characters in a string",
            "B": "To escape special characters in a string",
            "C": "To compile a regular expression pattern",
            "D": "To search for a pattern in a string"
        },
        "answer": "B",
        "explanation": "The 're.escape()' function escapes all special characters in a string so that it can be used as a literal string in a regular expression."
    },
    {
        "QN": "11",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "12",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the '.' special character match any character except newline",
            "B": "Makes the '.' special character match any character including newline",
            "C": "Makes the pattern case-insensitive",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "13",
        "type": "mcq",
        "question": "What is the purpose of non-capturing groups in regular expressions?",
        "options": {
            "A": "To capture groups for later reference",
            "B": "To group parts of a pattern without capturing them",
            "C": "To ignore parts of a pattern",
            "D": "To make the pattern case-insensitive"
        },
        "answer": "B",
        "explanation": "Non-capturing groups, denoted by '(?:pattern)', are used to group parts of a pattern without capturing them for later reference."
    },
    {
        "QN": "14",
        "type": "mcq",
        "question": "What does the '(?=pattern)' syntax represent in regular expressions?",
        "options": {
            "A": "Negative lookahead assertion",
            "B": "Positive lookahead assertion",
            "C": "Negative lookbehind assertion",
            "D": "Positive lookbehind assertion"
        },
        "answer": "B",
        "explanation": "The '(?=pattern)' syntax represents a positive lookahead assertion, which checks if the pattern matches without including it in the match."
    },
    {
        "QN": "15",
        "type": "mcq",
        "question": "What does the '(?<=pattern)' syntax represent in regular expressions?",
        "options": {
            "A": "Negative lookahead assertion",
            "B": "Positive lookahead assertion",
            "C": "Negative lookbehind assertion",
            "D": "Positive lookbehind assertion"
        },
        "answer": "D",
        "explanation": "The '(?<=pattern)' syntax represents a positive lookbehind assertion, which checks if the pattern matches before the current position without including it in the match."
    },
    {
        "QN": "16",
        "type": "mcq",
        "question": "How can you validate an email address using regular expressions in Python?",
        "options": {
            "A": "Using the pattern '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'",
            "B": "Using the pattern '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-]$'",
            "C": "Using the pattern '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9]$'",
            "D": "Using the pattern '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$' is commonly used to validate email addresses, allowing for most common email formats."
    },
    {
        "QN": "17",
        "type": "mcq",
        "question": "What is the purpose of the '(?<!pattern)' syntax in regular expressions?",
        "options": {
            "A": "Negative lookahead assertion",
            "B": "Positive lookahead assertion",
            "C": "Negative lookbehind assertion",
            "D": "Positive lookbehind assertion"
        },
        "answer": "C",
        "explanation": "The '(?<!pattern)' syntax represents a negative lookbehind assertion, which checks if the pattern does not match before the current position."
    },
    {
        "QN": "18",
        "type": "mcq",
        "question": "What does the '(?<!pattern)' syntax represent in regular expressions?",
        "options": {
            "A": "Negative lookahead assertion",
            "B": "Positive lookahead assertion",
            "C": "Negative lookbehind assertion",
            "D": "Positive lookbehind assertion"
        },
        "answer": "C",
        "explanation": "The '(?<!pattern)' syntax represents a negative lookbehind assertion, which checks if the pattern does not match before the current position."
    },
    {
        "QN": "19",
        "type": "mcq",
        "question": "What does the '(?!pattern)' syntax represent in regular expressions?",
        "options": {
            "A": "Negative lookahead assertion",
            "B": "Positive lookahead assertion",
            "C": "Negative lookbehind assertion",
            "D": "Positive lookbehind assertion"
        },
        "answer": "A",
        "explanation": "The '(?!pattern)' syntax represents a negative lookahead assertion, which checks if the pattern does not match after the current position."
    },
    {
        "QN": "20",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit using regular expressions?",
        "options": {
            "A": "Using the pattern '.*\\d.*'",
            "B": "Using the pattern '\\d+'",
            "C": "Using the pattern '\\d*'",
            "D": "Using the pattern '\\D+'"
        },
        "answer": "A",
        "explanation": "The pattern '.*\\d.*' matches any string that contains at least one digit ('\\d'). The '.*' before and after '\\d' ensures that the string can contain characters before and after the digit."
    },
    {
        "QN": "21",
        "type": "mcq",
        "question": "What does the '\\b' special sequence represent in regular expressions?",
        "options": {
            "A": "Word boundary",
            "B": "Non-word boundary",
            "C": "Start of a string",
            "D": "End of a string"
        },
        "answer": "A",
        "explanation": "The '\\b' special sequence represents a word boundary, which is the position where a word character is not followed or preceded by another word character."
    },
    {
        "QN": "22",
        "type": "mcq",
        "question": "How can you match a string that starts with 'abc' using regular expressions?",
        "options": {
            "A": "Using the pattern '^abc.*'",
            "B": "Using the pattern 'abc.*'",
            "C": "Using the pattern '.*abc'",
            "D": "Using the pattern 'abc$'"
        },
        "answer": "A",
        "explanation": "The pattern '^abc.*' matches any string that starts with 'abc'. The '^' symbol ensures the match is at the start of the string."
    },
    {
        "QN": "23",
        "type": "mcq",
        "question": "What does the '\\B' special sequence represent in regular expressions?",
        "options": {
            "A": "Word boundary",
            "B": "Non-word boundary",
            "C": "Start of a string",
            "D": "End of a string"
        },
        "answer": "B",
        "explanation": "The '\\B' special sequence represents a non-word boundary, which is the position where a word character is followed or preceded by another word character."
    },
    {
        "QN": "24",
        "type": "mcq",
        "question": "How can you match a string that ends with 'xyz' using regular expressions?",
        "options": {
            "A": "Using the pattern '^.*xyz'",
            "B": "Using the pattern '.*xyz$'",
            "C": "Using the pattern 'xyz.*'",
            "D": "Using the pattern '^xyz'"
        },
        "answer": "B",
        "explanation": "The pattern '.*xyz$' matches any string that ends with 'xyz'. The '$' symbol ensures the match is at the end of the string."
    },
    {
        "QN": "25",
        "type": "mcq",
        "question": "What does the '{n, m}' syntax represent in regular expressions?",
        "options": {
            "A": "Matches the preceding element at least n times and at most m times",
            "B": "Matches the preceding element exactly n times",
            "C": "Matches the preceding element at least n times",
            "D": "Matches the preceding element at most m times"
        },
        "answer": "A",
        "explanation": "The '{n, m}' syntax represents a quantifier that matches the preceding element at least n times and at most m times."
    },
    {
        "QN": "26",
        "type": "mcq",
        "question": "How can you validate a URL using regular expressions in Python?",
        "options": {
            "A": "Using the pattern '^https?://[^\\s]+'",
            "B": "Using the pattern '^https?://[a-zA-Z0-9-\\.]+\\.[a-zA-Z]{2,}(/.*)?$'",
            "C": "Using the pattern '^https?://[a-zA-Z0-9-\\.]+\\.[a-zA-Z]{2,}$'",
            "D": "Using the pattern '^https?://[a-zA-Z0-9-\\.]+'"
        },
        "answer": "B",
        "explanation": "The pattern '^https?://[a-zA-Z0-9-\\.]+\\.[a-zA-Z]{2,}(/.*)?$' is commonly used to validate URLs, allowing for HTTP or HTTPS and including optional path components."
    },
    {
        "QN": "27",
        "type": "mcq",
        "question": "What is the difference between 're.search()' and 're.match()'?",
        "options": {
            "A": "'re.search()' searches the entire string, while 're.match()' only searches from the start",
            "B": "'re.search()' only searches from the start, while 're.match()' searches the entire string",
            "C": "'re.search()' is case-insensitive, while 're.match()' is case-sensitive",
            "D": "'re.search()' is used for replacing, while 're.match()' is used for searching"
        },
        "answer": "A",
        "explanation": "'re.search()' searches for the first occurrence of the pattern anywhere in the string, while 're.match()' searches for the pattern only at the beginning of the string."
    },
    {
        "QN": "28",
        "type": "mcq",
        "question": "What does the 're.fullmatch()' function do?",
        "options": {
            "A": "It searches for the first occurrence of a pattern in a string",
            "B": "It matches the entire string against a pattern",
            "C": "It replaces occurrences of a pattern",
            "D": "It splits a string using a pattern"
        },
        "answer": "B",
        "explanation": "The 're.fullmatch()' function matches the entire string against a pattern, returning a match object if the string matches the pattern completely."
    },
    {
        "QN": "29",
        "type": "mcq",
        "question": "What is the purpose of the 're.subn()' function?",
        "options": {
            "A": "To replace occurrences of a pattern and return the number of replacements",
            "B": "To search for a pattern in a string",
            "C": "To split a string using a pattern",
            "D": "To compile a regular expression pattern"
        },
        "answer": "A",
        "explanation": "The 're.subn()' function replaces occurrences of a pattern in a string and returns a tuple containing the new string and the number of substitutions made."
    },
    {
        "QN": "30",
        "type": "mcq",
        "question": "How can you match a string that contains only letters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[a-zA-Z]+$'",
            "B": "Using the pattern '^[a-zA-Z]*$'",
            "C": "Using the pattern '^[a-zA-Z]?'",
            "D": "Using the pattern '^[a-zA-Z].*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[a-zA-Z]+$' matches any string that contains only letters from start to end."
    },
    {
        "QN": "31",
        "type": "mcq",
        "question": "What does the 're.finditer()' function do?",
        "options": {
            "A": "It returns an iterator yielding match objects for every occurrence of a pattern",
            "B": "It returns a list of all matches of a pattern",
            "C": "It searches for the first occurrence of a pattern",
            "D": "It replaces occurrences of a pattern"
        },
        "answer": "A",
        "explanation": "The 're.finditer()' function returns an iterator yielding match objects for every occurrence of a pattern in a string."
    },
    {
        "QN": "32",
        "type": "mcq",
        "question": "How can you match a string that contains at least one uppercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '.*[A-Z].*'",
            "B": "Using the pattern '[A-Z]+'",
            "C": "Using the pattern '[A-Z]*'",
            "D": "Using the pattern '[a-z]+'"
        },
        "answer": "A",
        "explanation": "The pattern '.*[A-Z].*' matches any string that contains at least one uppercase letter ('[A-Z]'). The '.*' before and after '[A-Z]' ensures that the string can contain characters before and after the uppercase letter."
    },
    {
        "QN": "33",
        "type": "mcq",
        "question": "What does the '\\A' special sequence represent in regular expressions?",
        "options": {
            "A": "Start of a string",
            "B": "End of a string",
            "C": "Start of a line",
            "D": "End of a line"
        },
        "answer": "A",
        "explanation": "The '\\A' special sequence represents the start of a string, similar to '^', but it always matches the start of the entire string, not just the start of each line in multiline mode."
    },
    {
        "QN": "34",
        "type": "mcq",
        "question": "What does the '\\Z' special sequence represent in regular expressions?",
        "options": {
            "A": "End of a string",
            "B": "Start of a string",
            "C": "End of a line",
            "D": "Start of a line"
        },
        "answer": "A",
        "explanation": "The '\\Z' special sequence represents the end of a string, similar to '$', but it always matches the end of the entire string, not just the end of each line in multiline mode."
    },
    {
        "QN": "35",
        "type": "mcq",
        "question": "How can you match a string that contains only digits using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\d+$'",
            "B": "Using the pattern '^\\d*$'",
            "C": "Using the pattern '^\\d?'",
            "D": "Using the pattern '^\\d.*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\d+$' matches any string that contains only digits from start to end."
    },
    {
        "QN": "36",
        "type": "mcq",
        "question": "How can you validate a date in the format 'YYYY-MM-DD' using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\d{4}-\\d{2}-\\d{2}$'",
            "B": "Using the pattern '^\\d{4}-\\d{1,2}-\\d{1,2}$'",
            "C": "Using the pattern '^\\d{4}-\\d{2}-\\d{1,2}$'",
            "D": "Using the pattern '^\\d{4}-\\d{1,2}-\\d{2}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\d{4}-\\d{2}-\\d{2}$' matches any string that is in the format 'YYYY-MM-DD', ensuring each part of the date has the correct number of digits."
    },
    {
        "QN": "37",
        "type": "mcq",
        "question": "What is the difference between 're.sub()' and 're.subn()'?",
        "options": {
            "A": "'re.sub()' returns the number of substitutions, while 're.subn()' returns the new string",
            "B": "'re.sub()' returns the new string, while 're.subn()' returns the new string and the number of substitutions",
            "C": "'re.sub()' is case-insensitive, while 're.subn()' is case-sensitive",
            "D": "'re.sub()' is used for searching, while 're.subn()' is used for replacing"
        },
        "answer": "B",
        "explanation": "'re.sub()' returns the new string after replacement, while 're.subn()' returns a tuple containing the new string and the number of substitutions made."
    },
    {
        "QN": "38",
        "type": "mcq",
        "question": "What does the 're.purge()' function do?",
        "options": {
            "A": "It clears the regular expression cache",
            "B": "It compiles a regular expression pattern",
            "C": "It searches for a pattern in a string",
            "D": "It replaces occurrences of a pattern"
        },
        "answer": "A",
        "explanation": "The 're.purge()' function clears the regular expression cache, which can be useful for freeing up memory if you're using a lot of different patterns."
    },
    {
        "QN": "39",
        "type": "mcq",
        "question": "How can you match a string that contains exactly three digits using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\d{3}$'",
            "B": "Using the pattern '^\\d{3,}$'",
            "C": "Using the pattern '^\\d{3,5}$'",
            "D": "Using the pattern '^\\d{1,3}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\d{3}$' matches any string that contains exactly three digits from start to end."
    },
    {
        "QN": "40",
        "type": "mcq",
        "question": "What does the 're.error' exception represent?",
        "options": {
            "A": "An error in the regular expression syntax",
            "B": "A match not found in the string",
            "C": "A memory error",
            "D": "A runtime error"
        },
        "answer": "A",
        "explanation": "The 're.error' exception is raised when there is an error in the regular expression syntax."
    },
    {
        "QN": "41",
        "type": "mcq",
        "question": "How can you match a string that contains at least two uppercase letters using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[A-Z].*[A-Z]).*$'",
            "B": "Using the pattern '^[A-Z]{2,}$'",
            "C": "Using the pattern '^[A-Z]*$'",
            "D": "Using the pattern '^[a-z]{2,}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[A-Z].*[A-Z]).*$' matches any string that contains at least two uppercase letters, using positive lookahead assertions."
    },
    {
        "QN": "42",
        "type": "mcq",
        "question": "What does the 're.TEMPLATE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Treats the pattern as a template, disabling backtracking"
        },
        "answer": "D",
        "explanation": "The 're.TEMPLATE' flag treats the pattern as a template, disabling backtracking, which can improve performance but may limit pattern flexibility."
    },
    {
        "QN": "43",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-F]+$'",
            "B": "Using the pattern '^[0-9]+$'",
            "C": "Using the pattern '^[a-fA-F]+$'",
            "D": "Using the pattern '^[0-9a-zA-Z]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-F]+$' matches any string that contains only hexadecimal digits from start to end."
    },
    {
        "QN": "44",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "45",
        "type": "mcq",
        "question": "How can you match a string that contains exactly five alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{5}$'",
            "B": "Using the pattern '^\\w{5,}$'",
            "C": "Using the pattern '^\\w{1,5}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{5}$' matches any string that contains exactly five alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "46",
        "type": "mcq",
        "question": "How can you validate an IP address using regular expressions?",
        "options": {
            "A": "Using the pattern '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'",
            "B": "Using the pattern '^([0-9]{1,3}\\.){3}[0-9]{1,3}$'",
            "C": "Using the pattern '^([0-9]{1,3}\\.){3}[0-9]{1,3}$' with 're.VERBOSE' flag",
            "D": "Using the pattern '^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$' is commonly used to validate IP addresses, ensuring each part is within the valid range of 0 to 255."
    },
    {
        "QN": "47",
        "type": "mcq",
        "question": "What is the difference between 're.search()' and 're.fullmatch()'?",
        "options": {
            "A": "'re.search()' searches the entire string, while 're.fullmatch()' matches the entire string",
            "B": "'re.search()' matches the entire string, while 're.fullmatch()' searches the entire string",
            "C": "'re.search()' is case-insensitive, while 're.fullmatch()' is case-sensitive",
            "D": "'re.search()' is used for replacing, while 're.fullmatch()' is used for searching"
        },
        "answer": "A",
        "explanation": "'re.search()' searches for the first occurrence of a pattern anywhere in the string, while 're.fullmatch()' matches the entire string against the pattern."
    },
    {
        "QN": "48",
        "type": "mcq",
        "question": "How can you match a string that contains at least one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '.*[a-z].*'",
            "B": "Using the pattern '[a-z]+'",
            "C": "Using the pattern '[a-z]*'",
            "D": "Using the pattern '[A-Z]+'"
        },
        "answer": "A",
        "explanation": "The pattern '.*[a-z].*' matches any string that contains at least one lowercase letter ('[a-z]'). The '.*' before and after '[a-z]' ensures that the string can contain characters before and after the lowercase letter."
    },
    {
        "QN": "49",
        "type": "mcq",
        "question": "What does the 're.A' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.A' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, which can be useful for ensuring that matches are limited to English characters."
    },
    {
        "QN": "50",
        "type": "mcq",
        "question": "How can you match a string that contains only letters and spaces using regular expressions?",
        "options": {
            "A": "Using the pattern '^[a-zA-Z\\s]+$'",
            "B": "Using the pattern '^[a-zA-Z]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^[a-zA-Z\\s]*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[a-zA-Z\\s]+$' matches any string that contains only letters and spaces from start to end."
    },
    {
        "QN": "51",
        "type": "mcq",
        "question": "What does the 're.X' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.X' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "52",
        "type": "mcq",
        "question": "How can you match a string that contains exactly four alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{4}$'",
            "B": "Using the pattern '^\\w{4,}$'",
            "C": "Using the pattern '^\\w{1,4}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{4}$' matches any string that contains exactly four alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "53",
        "type": "mcq",
        "question": "What does the 're.M' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.M' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "54",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character using regular expressions?",
        "options": {
            "A": "Using the pattern '.*[^a-zA-Z0-9].*'",
            "B": "Using the pattern '[a-zA-Z0-9]+'",
            "C": "Using the pattern '[a-zA-Z0-9]*'",
            "D": "Using the pattern '[a-zA-Z0-9]?'"
        },
        "answer": "A",
        "explanation": "The pattern '.*[^a-zA-Z0-9].*' matches any string that contains at least one character that is not a letter or digit, effectively matching special characters."
    },
    {
        "QN": "55",
        "type": "mcq",
        "question": "What does the 're.S' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.S' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "56",
        "type": "mcq",
        "question": "How can you validate a credit card number using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13})$'",
            "B": "Using the pattern '^[0-9]{16}$'",
            "C": "Using the pattern '^[0-9]{13,16}$'",
            "D": "Using the pattern '^[0-9]{1,16}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13})$' is commonly used to validate credit card numbers, supporting various card types like Visa, Mastercard, etc."
    },
    {
        "QN": "57",
        "type": "mcq",
        "question": "What is the difference between 're.findall()' and 're.finditer()'?",
        "options": {
            "A": "'re.findall()' returns a list of all matches, while 're.finditer()' returns an iterator yielding match objects",
            "B": "'re.findall()' returns an iterator yielding match objects, while 're.finditer()' returns a list of all matches",
            "C": "'re.findall()' is case-insensitive, while 're.finditer()' is case-sensitive",
            "D": "'re.findall()' is used for replacing, while 're.finditer()' is used for searching"
        },
        "answer": "A",
        "explanation": "'re.findall()' returns a list of all matches, while 're.finditer()' returns an iterator yielding match objects for every occurrence of the pattern."
    },
    {
        "QN": "58",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit and one letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[a-zA-Z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[a-zA-Z]).*$' matches any string that contains at least one digit ('\\d') and one letter ('[a-zA-Z]'), using positive lookahead assertions."
    },
    {
        "QN": "59",
        "type": "mcq",
        "question": "What does the 're.U' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match Unicode characters"
        },
        "answer": "D",
        "explanation": "The 're.U' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match Unicode characters, which can be useful for handling non-ASCII characters."
    },
    {
        "QN": "60",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits and letters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-F]+$'",
            "B": "Using the pattern '^[0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9a-zA-Z]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-F]+$' matches any string that contains only hexadecimal digits from start to end."
    },
    {
        "QN": "61",
        "type": "mcq",
        "question": "What does the 're.I' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "A",
        "explanation": "The 're.I' flag makes the pattern case-insensitive, so it matches both lowercase and uppercase characters."
    },
    {
        "QN": "62",
        "type": "mcq",
        "question": "How can you match a string that contains exactly six alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{6}$'",
            "B": "Using the pattern '^\\w{6,}$'",
            "C": "Using the pattern '^\\w{1,6}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{6}$' matches any string that contains exactly six alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "63",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "64",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character and one letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*[a-zA-Z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*[a-zA-Z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]') and one letter ('[a-zA-Z]'), using positive lookahead assertions."
    },
    {
        "QN": "65",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "66",
        "type": "mcq",
        "question": "How can you validate an ISBN number using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]$'",
            "B": "Using the pattern '^[0-9]{10}$'",
            "C": "Using the pattern '^[0-9]{13}$'",
            "D": "Using the pattern '^[0-9]{17}$'"
        },
        "answer": "A",
        "explanation": "The pattern for validating ISBN numbers is complex and must account for different formats and checksums."
    },
    {
        "QN": "67",
        "type": "mcq",
        "question": "What is the difference between 're.sub()' and string replacement methods like 'str.replace()'?",
        "options": {
            "A": "'re.sub()' uses regular expressions, while 'str.replace()' uses literal strings",
            "B": "'re.sub()' is case-insensitive, while 'str.replace()' is case-sensitive",
            "C": "'re.sub()' is used for searching, while 'str.replace()' is used for replacing",
            "D": "'re.sub()' is faster, while 'str.replace()' is slower"
        },
        "answer": "A",
        "explanation": "'re.sub()' uses regular expressions to match patterns, while 'str.replace()' uses literal strings for replacement."
    },
    {
        "QN": "68",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit and one uppercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z]).*$' matches any string that contains at least one digit ('\\d') and one uppercase letter ('[A-Z]'), using positive lookahead assertions."
    },
    {
        "QN": "69",
        "type": "mcq",
        "question": "What does the 're.DEBUG' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Displays debugging information about compiled regular expressions"
        },
        "answer": "D",
        "explanation": "The 're.DEBUG' flag displays debugging information about compiled regular expressions, which can be useful for understanding how patterns are interpreted."
    },
    {
        "QN": "70",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits and uppercase letters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-F]+$'",
            "B": "Using the pattern '^[0-9A-F]+$'",
            "C": "Using the pattern '^[A-F]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "B",
        "explanation": "The pattern '^[0-9A-F]+$' matches any string that contains only hexadecimal digits and uppercase letters from start to end."
    },
    {
        "QN": "71",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "72",
        "type": "mcq",
        "question": "How can you match a string that contains exactly seven alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{7}$'",
            "B": "Using the pattern '^\\w{7,}$'",
            "C": "Using the pattern '^\\w{1,7}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{7}$' matches any string that contains exactly seven alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "73",
        "type": "mcq",
        "question": "What does the 're.A' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.A' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, which can be useful for ensuring that matches are limited to English characters."
    },
    {
        "QN": "74",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character and one digit using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]') and one digit ('\\d'), using positive lookahead assertions."
    },
    {
        "QN": "75",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "76",
        "type": "mcq",
        "question": "How can you validate a social security number using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\d{3}-\\d{2}-\\d{4}$'",
            "B": "Using the pattern '^\\d{3}-\\d{2}-\\d{3}$'",
            "C": "Using the pattern '^\\d{3}\\s\\d{2}\\s\\d{4}$'",
            "D": "Using the pattern '^\\d{9}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\d{3}-\\d{2}-\\d{4}$' matches any string that is in the format of a social security number, with dashes separating the parts."
    },
    {
        "QN": "77",
        "type": "mcq",
        "question": "What is the difference between using 're.search()' and 're.match()' with the 're.MULTILINE' flag?",
        "options": {
            "A": "'re.search()' searches the entire string, while 're.match()' only searches from the start in multiline mode",
            "B": "'re.search()' only searches from the start, while 're.match()' searches the entire string in multiline mode",
            "C": "'re.search()' is case-insensitive, while 're.match()' is case-sensitive in multiline mode",
            "D": "'re.search()' is used for replacing, while 're.match()' is used for searching in multiline mode"
        },
        "answer": "A",
        "explanation": "'re.search()' searches for the first occurrence of a pattern anywhere in the string, while 're.match()' searches for the pattern only at the beginning of each line in multiline mode."
    },
    {
        "QN": "78",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[a-z]).*$' matches any string that contains at least one digit ('\\d') and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "79",
        "type": "mcq",
        "question": "What does the 're.IGNORECASE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "A",
        "explanation": "The 're.IGNORECASE' flag makes the pattern case-insensitive, so it matches both lowercase and uppercase characters."
    },
    {
        "QN": "80",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits and lowercase letters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-f]+$'",
            "B": "Using the pattern '^[0-9]+$'",
            "C": "Using the pattern '^[a-z]+$'",
            "D": "Using the pattern '^[0-9a-zA-Z]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-f]+$' matches any string that contains only hexadecimal digits and lowercase letters from start to end."
    },
    {
        "QN": "81",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "82",
        "type": "mcq",
        "question": "How can you match a string that contains exactly eight alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{8}$'",
            "B": "Using the pattern '^\\w{8,}$'",
            "C": "Using the pattern '^\\w{1,8}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{8}$' matches any string that contains exactly eight alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "83",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "84",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character and one uppercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*[A-Z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*[A-Z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]') and one uppercase letter ('[A-Z]'), using positive lookahead assertions."
    },
    {
        "QN": "85",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "86",
        "type": "mcq",
        "question": "How can you validate a license plate number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{3}-\\d{4}$'",
            "B": "Using the pattern '^[A-Z]{3}\\d{4}$'",
            "C": "Using the pattern '^[A-Z]{3}-[A-Z]{3}-\\d{4}$'",
            "D": "Using the pattern '^[A-Z]{3}-\\d{3}-\\d{4}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[A-Z]{3}-\\d{4}$' matches any string that is in the format of a typical license plate number with three letters followed by four digits."
    },
    {
        "QN": "87",
        "type": "mcq",
        "question": "What is the difference between using 're.findall()' and 're.finditer()' with capturing groups?",
        "options": {
            "A": "'re.findall()' returns a list of tuples for each group, while 're.finditer()' returns an iterator yielding match objects",
            "B": "'re.findall()' returns an iterator yielding match objects, while 're.finditer()' returns a list of tuples for each group",
            "C": "'re.findall()' is case-insensitive, while 're.finditer()' is case-sensitive",
            "D": "'re.findall()' is used for replacing, while 're.finditer()' is used for searching"
        },
        "answer": "A",
        "explanation": "'re.findall()' returns a list of tuples for each capturing group, while 're.finditer()' returns an iterator yielding match objects for every occurrence of the pattern."
    },
    {
        "QN": "88",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit and one special character using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[^a-zA-Z0-9]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[^a-zA-Z0-9]).*$' matches any string that contains at least one digit ('\\d') and one special character ('[^a-zA-Z0-9]'), using positive lookahead assertions."
    },
    {
        "QN": "89",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "90",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-F][^a-zA-Z0-9]*$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[^a-zA-Z0-9]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "C",
        "explanation": "The pattern '^[^a-zA-Z0-9]+$' matches any string that contains only special characters from start to end."
    },
    {
        "QN": "91",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "92",
        "type": "mcq",
        "question": "How can you match a string that contains exactly nine alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{9}$'",
            "B": "Using the pattern '^\\w{9,}$'",
            "C": "Using the pattern '^\\w{1,9}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{9}$' matches any string that contains exactly nine alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "93",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "94",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]') and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "95",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "96",
        "type": "mcq",
        "question": "How can you validate a VIN (Vehicle Identification Number) using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-HJ-NPR-Z0-9]{17}$'",
            "B": "Using the pattern '^[A-Z0-9]{17}$'",
            "C": "Using the pattern '^[A-Z0-9]{16}$'",
            "D": "Using the pattern '^[A-Z0-9]{15}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[A-HJ-NPR-Z0-9]{17}$' matches any string that is in the format of a typical VIN, excluding certain letters and ensuring it is 17 characters long."
    },
    {
        "QN": "97",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a function?",
        "options": {
            "A": "Using a replacement string is faster, while using a function is slower",
            "B": "Using a replacement string is case-insensitive, while using a function is case-sensitive",
            "C": "Using a replacement string replaces literally, while using a function allows dynamic replacement based on the match",
            "D": "Using a replacement string is used for searching, while using a function is used for replacing"
        },
        "answer": "C",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a function allows for dynamic replacement based on the match."
    },
    {
        "QN": "98",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit and one uppercase letter and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "99",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "100",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits and letters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-F]+$'",
            "B": "Using the pattern '^[0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9a-zA-Z]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-F]+$' matches any string that contains only hexadecimal digits from start to end."
    },
    {
        "QN": "101",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "102",
        "type": "mcq",
        "question": "How can you match a string that contains exactly ten alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{10}$'",
            "B": "Using the pattern '^\\w{10,}$'",
            "C": "Using the pattern '^\\w{1,10}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{10}$' matches any string that contains exactly ten alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "103",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "104",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character and one digit and one letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[a-zA-Z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[a-zA-Z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), and one letter ('[a-zA-Z]'), using positive lookahead assertions."
    },
    {
        "QN": "105",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "106",
        "type": "mcq",
        "question": "How can you validate a passport number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{2}[0-9]{9}$'",
            "B": "Using the pattern '^[A-Z]{1}[0-9]{9}$'",
            "C": "Using the pattern '^[A-Z]{3}[0-9]{6}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{6}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{9}$' matches any string that is in the format of a typical passport number, starting with two letters followed by nine digits."
    },
    {
        "QN": "107",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match."
    },
    {
        "QN": "108",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, and one lowercase letter, and one special character using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).*$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), and one special character ('[^a-zA-Z0-9]'), using positive lookahead assertions."
    },
    {
        "QN": "109",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "110",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits and letters and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "111",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "112",
        "type": "mcq",
        "question": "How can you match a string that contains exactly eleven alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{11}$'",
            "B": "Using the pattern '^\\w{11,}$'",
            "C": "Using the pattern '^\\w{1,11}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{11}$' matches any string that contains exactly eleven alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "113",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "114",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "115",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "116",
        "type": "mcq",
        "question": "How can you validate a driver's license number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{3}[0-9]{7}$'",
            "B": "Using the pattern '^[A-Z]{2}[0-9]{6}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{7}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{7}$'"
        },
        "answer": "D",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{7}$' matches any string that is in the format of a typical driver's license number, starting with two letters followed by seven digits."
    },
    {
        "QN": "117",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match."
    },
    {
        "QN": "118",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is at least five characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{5,}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{5,}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is at least five characters long, using positive lookahead assertions."
    },
    {
        "QN": "119",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "120",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "121",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "122",
        "type": "mcq",
        "question": "How can you match a string that contains exactly twelve alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{12}$'",
            "B": "Using the pattern '^\\w{12,}$'",
            "C": "Using the pattern '^\\w{1,12}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{12}$' matches any string that contains exactly twelve alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "123",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "124",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "125",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "126",
        "type": "mcq",
        "question": "How can you validate a bank account number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9]{16}$'",
            "B": "Using the pattern '^[0-9]{13}$'",
            "C": "Using the pattern '^[0-9]{10}$'",
            "D": "Using the pattern '^[0-9]{12}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9]{16}$' matches any string that is a typical 16-digit bank account number."
    },
    {
        "QN": "127",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups."
    },
    {
        "QN": "128",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is exactly ten characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{10}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{10}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is exactly ten characters long, using positive lookahead assertions."
    },
    {
        "QN": "129",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "130",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "131",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "132",
        "type": "mcq",
        "question": "How can you match a string that contains exactly thirteen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{13}$'",
            "B": "Using the pattern '^\\w{13,}$'",
            "C": "Using the pattern '^\\w{1,13}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{13}$' matches any string that contains exactly thirteen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "133",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "134",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "135",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "136",
        "type": "mcq",
        "question": "How can you validate an IMEI number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9]{15}$'",
            "B": "Using the pattern '^[0-9]{14}$'",
            "C": "Using the pattern '^[0-9]{16}$'",
            "D": "Using the pattern '^[0-9]{17}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9]{15}$' matches any string that is a typical 15-digit IMEI number."
    },
    {
        "QN": "137",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures."
    },
    {
        "QN": "138",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between five and ten characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{5,10}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{5,10}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between five and ten characters long, using positive lookahead assertions."
    },
    {
        "QN": "139",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "140",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "141",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "142",
        "type": "mcq",
        "question": "How can you match a string that contains exactly fourteen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{14}$'",
            "B": "Using the pattern '^\\w{14,}$'",
            "C": "Using the pattern '^\\w{1,14}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{14}$' matches any string that contains exactly fourteen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "143",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "144",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "145",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "146",
        "type": "mcq",
        "question": "How can you validate a serial number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{2}[0-9]{6}$'",
            "B": "Using the pattern '^[A-Z]{3}[0-9]{5}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{7}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{7}$'"
        },
        "answer": "D",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{7}$' matches any string that is in the format of a typical serial number, starting with two letters followed by seven digits."
    },
    {
        "QN": "147",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional replacement?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures for conditional logic",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling conditional logic."
    },
    {
        "QN": "148",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between eight and twelve characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{8,12}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{8,12}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between eight and twelve characters long, using positive lookahead assertions."
    },
    {
        "QN": "149",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "150",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "151",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "152",
        "type": "mcq",
        "question": "How can you match a string that contains exactly fifteen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{15}$'",
            "B": "Using the pattern '^\\w{15,}$'",
            "C": "Using the pattern '^\\w{1,15}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{15}$' matches any string that contains exactly fifteen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "153",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "154",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "155",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "156",
        "type": "mcq",
        "question": "How can you validate a product code using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{3}[0-9]{5}$'",
            "B": "Using the pattern '^[A-Z]{2}[0-9]{6}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{7}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{7}$'"
        },
        "answer": "B",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{6}$' matches any string that is in the format of a typical product code, starting with two letters followed by six digits."
    },
    {
        "QN": "157",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional logic with multiple conditions?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures with conditional logic for multiple conditions",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling complex conditional logic for multiple conditions."
    },
    {
        "QN": "158",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between nine and thirteen characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{9,13}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{9,13}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between nine and thirteen characters long, using positive lookahead assertions."
    },
    {
        "QN": "159",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "160",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "161",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "162",
        "type": "mcq",
        "question": "How can you match a string that contains exactly sixteen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{16}$'",
            "B": "Using the pattern '^\\w{16,}$'",
            "C": "Using the pattern '^\\w{1,16}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{16}$' matches any string that contains exactly sixteen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "163",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "164",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "165",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "166",
        "type": "mcq",
        "question": "How can you validate a coupon code using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{2}[0-9]{4}[A-Z]{2}$'",
            "B": "Using the pattern '^[A-Z]{3}[0-9]{3}[A-Z]{3}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{5}[A-Z]{1}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{5}[A-Z]{2}$'"
        },
        "answer": "D",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{5}[A-Z]{2}$' matches any string that is in the format of a typical coupon code, starting with two letters followed by five digits and ending with two letters."
    },
    {
        "QN": "167",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional logic with multiple conditions and error handling?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures with conditional logic for multiple conditions and error handling",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling complex conditional logic for multiple conditions and error handling."
    },
    {
        "QN": "168",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between ten and fifteen characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{10,15}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{10,15}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between ten and fifteen characters long, using positive lookahead assertions."
    },
    {
        "QN": "169",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "170",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "171",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "172",
        "type": "mcq",
        "question": "How can you match a string that contains exactly seventeen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{17}$'",
            "B": "Using the pattern '^\\w{17,}$'",
            "C": "Using the pattern '^\\w{1,17}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{17}$' matches any string that contains exactly seventeen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "173",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "174",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "175",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "176",
        "type": "mcq",
        "question": "How can you validate a gift card number using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9]{16}$'",
            "B": "Using the pattern '^[0-9]{13}$'",
            "C": "Using the pattern '^[0-9]{15}$'",
            "D": "Using the pattern '^[0-9]{19}$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9]{16}$' matches any string that is a typical 16-digit gift card number."
    },
    {
        "QN": "177",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional logic with multiple conditions, error handling, and logging?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures with conditional logic for multiple conditions, error handling, and logging",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling complex conditional logic for multiple conditions, error handling, and logging."
    },
    {
        "QN": "178",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between eleven and sixteen characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{11,16}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{11,16}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between eleven and sixteen characters long, using positive lookahead assertions."
    },
    {
        "QN": "179",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "180",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "181",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "182",
        "type": "mcq",
        "question": "How can you match a string that contains exactly eighteen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{18}$'",
            "B": "Using the pattern '^\\w{18,}$'",
            "C": "Using the pattern '^\\w{1,18}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{18}$' matches any string that contains exactly eighteen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "183",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "184",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "185",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "186",
        "type": "mcq",
        "question": "How can you validate a membership ID using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{2}[0-9]{8}$'",
            "B": "Using the pattern '^[A-Z]{3}[0-9]{6}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{9}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{9}$'"
        },
        "answer": "D",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{9}$' matches any string that is in the format of a typical membership ID, starting with two letters followed by nine digits."
    },
    {
        "QN": "187",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional logic with multiple conditions, error handling, logging, and input validation?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures with conditional logic for multiple conditions, error handling, logging, and input validation",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling complex conditional logic for multiple conditions, error handling, logging, and input validation."
    },
    {
        "QN": "188",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between twelve and seventeen characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{12,17}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{12,17}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between twelve and seventeen characters long, using positive lookahead assertions."
    },
    {
        "QN": "189",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "190",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "191",
        "type": "mcq",
        "question": "What does the 're.DOTALL' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "C",
        "explanation": "The 're.DOTALL' flag makes the '.' special character match any character, including newline characters."
    },
    {
        "QN": "192",
        "type": "mcq",
        "question": "How can you match a string that contains exactly nineteen alphanumeric characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^\\w{19}$'",
            "B": "Using the pattern '^\\w{19,}$'",
            "C": "Using the pattern '^\\w{1,19}$'",
            "D": "Using the pattern '^\\w*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^\\w{19}$' matches any string that contains exactly nineteen alphanumeric characters (or underscores) from start to end."
    },
    {
        "QN": "193",
        "type": "mcq",
        "question": "What does the 're.VERBOSE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Allows whitespace and comments in the regular expression pattern"
        },
        "answer": "D",
        "explanation": "The 're.VERBOSE' flag allows whitespace and comments in the regular expression pattern, making it easier to read and understand complex patterns."
    },
    {
        "QN": "194",
        "type": "mcq",
        "question": "How can you match a string that contains at least one special character, one digit, one uppercase letter, and one lowercase letter using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*[^a-zA-Z0-9])(?=.*\\d)(?=.*[A-Z])(?=.*[a-z]).*$' matches any string that contains at least one special character ('[^a-zA-Z0-9]'), one digit ('\\d'), one uppercase letter ('[A-Z]'), and one lowercase letter ('[a-z]'), using positive lookahead assertions."
    },
    {
        "QN": "195",
        "type": "mcq",
        "question": "What does the 're.MULTILINE' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Ignores whitespace characters"
        },
        "answer": "B",
        "explanation": "The 're.MULTILINE' flag makes the '^' and '$' anchors match the start and end of each line in a multiline string, not just the start and end of the entire string."
    },
    {
        "QN": "196",
        "type": "mcq",
        "question": "How can you validate a membership code using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{3}[0-9]{6}$'",
            "B": "Using the pattern '^[A-Z]{2}[0-9]{7}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{8}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{8}$'"
        },
        "answer": "D",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{8}$' matches any string that is in the format of a typical membership code, starting with two letters followed by eight digits."
    },
    {
        "QN": "197",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional logic with multiple conditions, error handling, logging, input validation, and exception handling?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures with conditional logic for multiple conditions, error handling, logging, input validation, and exception handling",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling complex conditional logic for multiple conditions, error handling, logging, input validation, and exception handling."
    },
    {
        "QN": "198",
        "type": "mcq",
        "question": "How can you match a string that contains at least one digit, one uppercase letter, one lowercase letter, and one special character, and is between thirteen and eighteen characters long using regular expressions?",
        "options": {
            "A": "Using the pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{13,18}$'",
            "B": "Using the pattern '^[a-zA-Z0-9]+$'",
            "C": "Using the pattern '^[a-zA-Z]*$'",
            "D": "Using the pattern '^\\d*$'"
        },
        "answer": "A",
        "explanation": "The pattern '^(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[^a-zA-Z0-9]).{13,18}$' matches any string that contains at least one digit ('\\d'), one uppercase letter ('[A-Z]'), one lowercase letter ('[a-z]'), one special character ('[^a-zA-Z0-9]'), and is between thirteen and eighteen characters long, using positive lookahead assertions."
    },
    {
        "QN": "199",
        "type": "mcq",
        "question": "What does the 're.ASCII' flag do?",
        "options": {
            "A": "Makes the pattern case-insensitive",
            "B": "Makes the '^' and '$' anchors match the start and end of each line",
            "C": "Makes the '.' special character match any character including newline",
            "D": "Makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only"
        },
        "answer": "D",
        "explanation": "The 're.ASCII' flag makes the special sequences like '\\w', '\\W', '\\b', etc., match ASCII characters only, similar to 're.A'."
    },
    {
        "QN": "200",
        "type": "mcq",
        "question": "How can you match a string that contains only hexadecimal digits, letters, and special characters using regular expressions?",
        "options": {
            "A": "Using the pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$'",
            "B": "Using the pattern '^[0-9a-fA-F]+$'",
            "C": "Using the pattern '^[a-zA-Z]+$'",
            "D": "Using the pattern '^[0-9]+$'"
        },
        "answer": "A",
        "explanation": "The pattern '^[0-9a-fA-Fa-zA-Z[^a-zA-Z0-9]]+$' matches any string that contains hexadecimal digits, letters, and special characters from start to end."
    },
    {
        "QN": "201",
        "type": "mcq",
        "question": "How can you validate a coupon code using regular expressions?",
        "options": {
            "A": "Using the pattern '^[A-Z]{2}[0-9]{4}[A-Z]{2}$'",
            "B": "Using the pattern '^[A-Z]{3}[0-9]{3}[A-Z]{3}$'",
            "C": "Using the pattern '^[A-Z]{1}[0-9]{5}[A-Z]{1}$'",
            "D": "Using the pattern '^[A-Z]{2}[0-9]{5}[A-Z]{2}$'"
        },
        "answer": "D",
        "explanation": "The pattern '^[A-Z]{2}[0-9]{5}[A-Z]{2}$' matches any string that is in the format of a typical coupon code, starting with two letters followed by five digits and ending with two letters."
    },
    {
        "QN": "202",
        "type": "mcq",
        "question": "What is the difference between using 're.sub()' with a replacement string versus a lambda function that uses the match object's groups and captures for conditional logic with multiple conditions, error handling, logging, input validation, exception handling, and performance optimization?",
        "options": {
            "A": "Using a replacement string is faster, while using a lambda function is slower",
            "B": "Using a replacement string replaces literally, while using a lambda function allows dynamic replacement based on the match groups and captures with conditional logic for multiple conditions, error handling, logging, input validation, exception handling, and performance optimization",
            "C": "Using a replacement string is case-insensitive, while using a lambda function is case-sensitive",
            "D": "Using a replacement string is used for searching, while using a lambda function is used for replacing"
        },
        "answer": "B",
        "explanation": "Using a replacement string with 're.sub()' replaces matches literally, while using a lambda function allows for dynamic replacement based on the match groups and captures, enabling complex conditional logic for multiple conditions, error handling, logging, input validation, exception handling, and performance optimization."
    }
]
